//Factor Of A Number - Pseudo Code

//Logic 1 - Normal Method
BEGIN
    FUNCTION find_length(num):
        IF (num == 0) THEN
            RETURN 1
        ABSOLUTIZE num = CALL absolute_function(num) //converting given number (positive (or) negative) into positive number (calculating absolute value of number)
        INITIALIZE count = 0
        WHILE (num > 0):
            INCREMENT count = count + 1
            COMPUTE num = num // 10
        RETURN count //returning the length of given number
    
    FUNCTION is_factor_1(dividend, divisor)
        IF (divisor == 0) THEN
            RETURN -1
        ELSE
            COMPUTE remainder = dividend % divisor
            IF (remainder == 0) THEN
                RETURN 1
            ELSE
                RETURN 0
            END IF
        END IF
    END FUNCTION
    
    FUNCTION main()
        INPUT num_1, num_2
        ASSIGN result = CALL is_factor_1(num_1, num_2) 
        IF (result == 1) THEN
            OUTPUT "Factor"
        ELIF (result == 0) THEN
            OUTPUT "Not Factor"
        ELIF (result == -1) THEN
            OUTPUT "Factor cannot be zero"
        END IF
    END FUNCTION
END


//Logic 2 - Divisibility Rule Method

/*
Arithmetic Progression (AP) Formula: an = a1 + (n-1)*d => an = a1 + D;
Terms used in AP: a(1) is 1st term, a(n) is nth term
d is common difference (or) stepwise difference between a(n) and a(n-1); d = a(n) - a(n-1) (Ex: For n = 2, d = a2 - a1)
D is total difference from a1 to an; D = (n-1)*d => D = (an - a1) (Ex: For n = 5, d = 2, D = (5-1)*2 = 4*2 = 8 = (a5 - a1)
no. of steps =  D /d => no. of steps = (n-1) / d => no. of steps = (an - a1) / d

Note: No of steps is same for both divisor series and base value series of corresponding divisor series (both APs)
Divisor series = divisor to i (except for divisor = 11 where a1 = 11) where a1 = divisor, an = i
Ex: For divisor = 7, divisor series = 7, 17, 27, 37, 47, ... where a1 = 7, an = i (a divisor that ends with 7), d = 17-7 = 10
If a1 = 7, an = 47, then D = 47 - 7 = 40 = 4*10 = (5 - 1)*10 (since n = 5 as n = count(7, 17, 27, 37, 47))
Base value series of corresponding divisor series = base value to j where a1 = base value, an = j
Ex: For base value = 2 for corresponding divisor = 7, base value series = 2, 5, 8, 11, 14, ... where a1 = 2, an = j, d = 3
If a1 = 2, an = 14, then D = 14 - 2 = 12 = 4*3 = (5 - 1)*3 (since n = 5 as n = count(2, 5, 8, 11, 14))
*/

BEGIN
    //divisor_unit_3 means 3 is the unit digit of divisor (last digit ends with 3) in the divisor series - 3, 13, 23, 33, 43, ...
    FUNCTION divisor_unit_3(dividend, divisor):
        INITIALIZE digit = 0
        ASSIGN truncand = dividend //initially dividend is assigned to truncand for starting of loop
        //creating visit set using hashset (like set)
        INITIALIZE visit = hashset(), digit = 0
        INSERT visit.add(divisor) //adding divisor to visit set to make the modular reduction properly by terminal residue modulo divisor
        //calculation 1: calculate no of steps - From AP formula: Here, an = divisor (given), a1 = 3, d = 10
        COMPUTE no_of_steps = (divisor - 3) / 10
        //calculation 2: calculate digit_multiplier - From AP formula: Here a1 = base value = 1, d = stepwise difference = 3, no of steps = (from calculation 1)
        INITIALIZE base_value = 1, stepwise_difference = 3
        COMPUTE digit_multiplier = base_value + (no_of_steps * stepwise_difference)
        WHILE((truncand NOT IN visit) AND (truncand > 0)) DO
            INSERT visit.add(truncand) //inserting (or) adding current truncand values to visit set to track repeated elements to avoid cycle of loop
            COMPUTE digit = truncand % 10 //extracting last digit
            COMPUTE digit_product = digit * digit_multiplier //here, digit is multiplicand, digit_multiplier is multiplier and digit_product is product
            COMPUTE truncand = truncand / 10 //removing last digit
            ABSOLUTIZE truncand = absolute_function(truncand - digit_product) //updating truncand with absolute difference between truncand and digit product
            OUTPUT truncand " " //displaying current truncand value followed by single space at its end for better readability
        END WHILE
        OUTPUT "/n" //displaying a newline "\n" after the while loop for better readability
        RETURN truncand
    END FUNCTION
    
    //divisor_unit_9 means 9 is the unit digit of divisor (last digit ends with 9) in the divisor series - 9, 19, 29, 39, 49, ...
    FUNCTION divisor_unit_9(dividend, divisor):
        INITIALIZE digit = 0
        ASSIGN truncand = dividend //initially dividend is assigned to truncand for starting of loop
        //creating visit set using hashset (like set)
        INITIALIZE visit = hashset(), digit = 0
        INSERT visit.add(divisor) //adding divisor to visit set to make the modular reduction properly by terminal residue modulo divisor
        //calculation 1: calculate no of steps - From AP formula: Here, an = divisor (given), a1 = 9, d = 10
        COMPUTE no_of_steps = (divisor - 9) // 10
        //calculation 2: calculate digit_multiplier - From AP formula: Here a1 = base value = 1, d = stepwise difference = 1, no of steps = (from calculation 1)
        INITIALIZE base_value = 1, stepwise_difference = 1
        COMPUTE digit_multiplier = base_value + (no_of_steps * stepwise_difference)
        WHILE((truncand NOT IN visit) AND (truncand > 0)) DO
            INSERT visit.add(truncand) //inserting (or) adding current truncand values to visit set to track repeated elements to avoid cycle of loop
            COMPUTE digit = truncand % 10 //extracting last digit
            COMPUTE digit_product = digit * digit_multiplier //here, digit is multiplicand, digit_multiplier is multiplier and digit_product is product
            COMPUTE truncand = truncand / 10 //removing last digit
            ABSOLUTIZE truncand = absolute_function(truncand - digit_product) //updating truncand with absolute difference between truncand and digit product
            OUTPUT truncand " " //displaying current truncand value followed by single space at its end for better readability
        END WHILE
        OUTPUT "/n" //displaying a newline "\n" after the while loop for better readability
        RETURN truncand
    END FUNCTION
    
    //divisor_unit_7 means 7 is the unit digit of divisor (last digit ends with 7) in the divisor series - 7, 17, 27, 37, 47, ...
    FUNCTION divisor_unit_7(dividend, divisor):
        INITIALIZE digit = 0
        ASSIGN truncand = dividend //initially dividend is assigned to truncand for starting of loop
        //creating visit set using hashset (like set)
        INITIALIZE visit = hashset(), digit = 0
        INSERT visit.add(divisor) //adding divisor to visit set to make the modular reduction properly by terminal residue modulo divisor
        //calculation 1: calculate no of steps - From AP formula: Here, an = divisor (given), a1 = 7, d = 10
        COMPUTE no_of_steps = (divisor - 7) // 10
        //calculation 2: calculate digit_multiplier - From AP formula: Here a1 = base value = 2, d = stepwise difference = 3, no of steps = (from calculation 1)
        INITIALIZE base_value = 2, stepwise_difference = 3
        COMPUTE digit_multiplier = base_value + (no_of_steps * stepwise_difference)
        WHILE((truncand NOT IN visit) AND (truncand > 0)) DO
            INSERT visit.add(truncand) //inserting (or) adding current truncand values to visit set to track repeated elements to avoid cycle of loop
            COMPUTE digit = truncand % 10 //extracting last digit
            COMPUTE digit_product = digit * digit_multiplier //here, digit is multiplicand, digit_multiplier is multiplier and digit_product is product
            COMPUTE truncand = truncand / 10 //removing last digit
            ABSOLUTIZE truncand = absolute_function(truncand - digit_product) //updating truncand with absolute difference between truncand and digit product
            OUTPUT truncand " " //displaying current truncand value followed by single space at its end for better readability
        END WHILE
        OUTPUT "/n" //displaying a newline "\n" after the while loop for better readability
        RETURN truncand
    END FUNCTION
    
    //divisor_unit_11 means 11 is the unit digit of divisor (last digit ends with 11) (1 is exception) in the divisor series - 11, 21, 31, 41, 51, ...
    FUNCTION divisor_unit_11(dividend, divisor):
        INITIALIZE digit = 0
        ASSIGN truncand = dividend //initially dividend is assigned to truncand for starting of loop
        //creating visit set using hashset (like set)
        INITIALIZE visit = hashset(), digit = 0
        INSERT visit.add(divisor) //adding divisor to visit set to make the modular reduction properly by terminal residue modulo divisor 
        //calculation 1: calculate no of steps - From AP formula: Here, an = divisor (given), a1 = 11, d = 10
        COMPUTE no_of_steps = (divisor - 11) / 10
        //calculation 2: calculate digit_multiplier - From AP formula: Here a1 = base value = 1, d = stepwise difference = 1, no of steps = (from calculation 1)
        INITIALIZE base_value = 1, stepwise_difference = 1
        COMPUTE digit_multiplier = base_value + (no_of_steps * stepwise_difference)
        WHILE((truncand NOT IN visit) AND (truncand > 0)) DO
            INSERT visit.add(truncand) //inserting (or) adding current truncand values to visit set to track repeated elements to avoid cycle of loop
            COMPUTE digit = truncand % 10 //extracting last digit
            COMPUTE digit_product = digit * digit_multiplier //here, digit is multiplicand, digit_multiplier is multiplier and digit_product is product
            COMPUTE truncand = truncand / 10 //removing last digit
            ABSOLUTIZE truncand = absolute_function(truncand - digit_product) //updating truncand with absolute difference between truncand and digit product
            OUTPUT truncand " " //displaying current truncand value followed by single space at its end for better readability
        END WHILE
        OUTPUT "/n" //displaying a newline "\n" after the while loop for better readability
        RETURN truncand
    END FUNCTION
    
    FUNCTION is_div_by_1(dividend)
        RETURN 1
    END FUNCTION
    
    FUNCTION is_div_by_2(dividend)
        COMPUTE last_digit = dividend % 10
        IF (last_digit == 0) OR (last_digit == 2) OR (last_digit == 4) OR (last_digit == 6) OR (last_digit == 8) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_3(dividend)
        INITIALIZE result = divisor_unit_3(dividend, 3)
        IF ((result == 3) OR (result == 6) OR (result == 9)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_4(dividend)
        COMPUTE last_2_digits = dividend % 100
        IF ((last_2_digits) % 4 == 0) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_5(dividend)
        COMPUTE last_digit = dividend % 10
        IF ((last_digit == 0) OR (last_digit == 5)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_6(dividend)
        ASSIGN cofactors = (CALL is_div_by_2(dividend) == 1) AND (CALL is_div_by_3(dividend) == 1)
        IF (cofactors == 1) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_7(dividend)
        INITIALIZE result = divisor_unit_7(dividend, 7)
        IF ((result == 0) OR (result == 7)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_8(dividend)
        COMPUTE last_3_digits = dividend % 1000
        IF ((last_3_digits) % 8 == 0) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_9(dividend)
        INITIALIZE result = divisor_unit_9(dividend, 9)
        IF (result == 9) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_10(dividend)
        COMPUTE last_digit = dividend % 10
        IF (last_digit == 0) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_11_1(dividend)
        INITIALIZE result = divisor_unit_11(dividend, 11)
        IF ((result == 0) OR (result == 11)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_11_2(dividend)
        INITIALIZE odd_digits_sum = 0 //sum of digits at odd places (from right to left)
        INITIALIZE even_digits_sum = 0 // sum of digits at even places (from right to left)
        INITIALIZE position = 1 //position counter (starting from right)
        WHILE (num > 0) DO
            COMPUTE digit = num % 10 //extract last digit
            IF ((position % 2) == 1) THEN
                INCREMENT odd_digits_sum = odd_digits_sum + 1 //incrementing odd_digits_sum after fetching odd position digit
            ELSE
                INCREMENT even_digits_sum = even_digits_sum + 1 //incrementing even_digits_sum after fetching even position digit
            END IF
            COMPUTE num = num / 10 //remove last digit
            INCREMENT position = position + 1 //move to the next position by incrementing position counter
        END WHILE
        ABSOLUTIZE result = CALL absolute_function(odd_digits_sum - even_digits_sum) //calculating absolute difference between odd_digits_sum and even_digits_sum
        IF ((result == 0) OR (result == 11)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_12(dividend)
        ASSIGN cofactors = (CALL is_div_by_3(dividend) == 1) AND (CALL is_div_by_4(dividend) == 1)
        IF (cofactors == 1) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_13(dividend)
        INITIALIZE result = divisor_unit_3(dividend, 13)
        IF ((result == 13) OR (result == 26) OR (result == 39)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_14(dividend)
        ASSIGN cofactors = (CALL is_div_by_2(dividend) == 1) AND (CALL is_div_by_7(dividend) == 1)
        IF (cofactors == 1) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_15(dividend)
        ASSIGN cofactors = (CALL is_div_by_3(dividend) == 1) AND (CALL is_div_by_5(dividend) == 1)
        IF (cofactors == 1) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_16(dividend)
        COMPUTE last_4_digits = dividend % 10000
        IF ((last_4_digits) % 16 == 0) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_17(dividend)
        INITIALIZE result = divisor_unit_7(dividend, 17)
        IF ((result == 0) OR (result == 17)) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_18(dividend)
        ASSIGN cofactors = (CALL is_div_by_2(dividend) == 1) AND (CALL is_div_by_9(dividend) == 1)
        IF (cofactors == 1) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_19(dividend)
        INITIALIZE result = divisor_unit_9(dividend, 19)
        IF (result == 19) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF
    END FUNCTION
    
    FUNCTION is_div_by_20(dividend)
        ASSIGN cofactors = (CALL is_div_by_4(dividend) == 1) AND (CALL is_div_by_5(dividend) == 1)
        IF (cofactors == 1) THEN
            RETURN 1
        ELSE
            RETURN 0
        END IF

    END FUNCTION
    
    FUNCTION is_factor_2(dividend, divisor)
        INITIALIZE flag = 0
        //creating divisibility rule table using all divisibility of numbers functions as hashmap (like dictionary)
        ASSIGN divisibility_rule_table =
        {
        1: is_div_by_1, 2: is_div_by_2, 3: is_div_by_3, 4: is_div_by_4, 5: is_div_by_5, 6: is_div_by_6, 7: is_div_by_7, 8: is_div_by_8, 9: is_div_by_9, 10: is_div_by_10,
        11: is_div_by_11_1, 12: is_div_by_12, 13: is_div_by_13, 14: is_div_by_14, 15: is_div_by_15, 16: is_div_by_16, 17: is_div_by_17, 18: is_div_by_18, 19: is_div_by_19, 20: is_div_by_20
        }
        flag = CALL divisibility_rule_table[divisor](dividend)
        RETURN flag
    END FUNCTION
    
    FUNCTION main()
        INPUT num_1, num_2
        ASSIGN result = CALL is_factor_2(num_1, num_2)
        IF (result == 1) THEN
            OUTPUT "Factor"
        ELIF (result == 0) THEN
            OUTPUT "Not Factor"
        ELIF (result == -1) THEN
            OUTPUT "Factor cannot be zero"
        END IF
    END FUNCTION
END
