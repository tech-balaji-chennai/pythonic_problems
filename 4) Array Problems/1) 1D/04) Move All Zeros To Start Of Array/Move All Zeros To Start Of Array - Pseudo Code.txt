//Move All Zeros To Start Of Array - Pseudo Code

//Logic 1 - Naive Approach Using Temporary Array
BEGIN
    FUNCTION move_zeros_to_end_1(array_name, array_size) //move_zeros_to_end_1 since logic 1
        IF ((array_size == 0) OR (array_size == 1)) THEN
            RETURN array_name
        END IF
        //creating temporary array 'temp'
        INITIALIZE temp_array = array
        FOR (i = 0 TO array_size-1) DO
            temp_array[i] = NULL
        END FOR
        //keeping track of zero-element count if element is not a non-zero element
        INITIALIZE count_zero = 0
        //keeping track of non-zero-element count if element is a non-zero element
        INITIALIZE count_non_zero = 0
        //copying non-zero elements to temp array
        FOR (i = 0 TO array_size-1) DO
            IF (array_name[i] != 0) THEN
                ASSIGN temp_array[count_non_zero] = array_name[i]
                INCREMENT count_non_zero = count_non_zero + 1
            ELSE
                INCREMENT count_zero = count_zero + 1
            END IF
        END FOR
        //filling count no of zeros in original array
        FOR (i = 0 TO count_zero - 1) DO
            array_name[i] = 0
        END FOR
        //filling remaining positions in original array with non-zero elements of temp array
        INITIALIZE j = 0
        FOR (i = count_zero TO array_size-1) DO
            array_name[i] = temp_array[j]
            INCREMENT j = j+1
        END FOR
        RETURN array_name
    END FUNCTION
    
    FUNCTION main()
        INPUT array_size
        IF (array_size == 0) THEN
            ASSIGN array_name = [] //empty array
        ELSE
            INPUT array_name //Enter comma-separated values
        END IF
        ASSIGN result = CALL move_zeros_to_end_1(array_name, array_size)
        OUTPUT result
    END FUNCTION
END


//Logic 2 - Expected Approach Using Two Traversal (Swapping)
BEGIN
    FUNCTION move_zeros_to_end_1(array_name, array_size) //move_zeros_to_end_1 since logic 1
        IF ((array_size == 0) OR (array_size == 1)) THEN
            RETURN array_name
        END IF
        //finding the index of last zero in array
        INITIALIZE end = -1
        FOR (i = array_size-1 TO 0 STEP -1) DO
            IF (array_name[i] == 0) THEN
                ASSIGN end = i
                BREAK
            END IF
        END FOR
        FOR (i = end-1 TO 0 STEP -1) DO
            IF (array_name[i] != 0) THEN
                CALL swap_function(array_name[i], array_name[end]
                DECREMENT end = end-1
            END IF
        RETURN array_name        
    END FUNCTION
    
    FUNCTION main()
        INPUT array_size
        IF (array_size == 0) THEN
            ASSIGN array_name = [] //empty array
        ELSE
            INPUT array_name //Enter comma-separated values
        END IF
        ASSIGN result = CALL move_zeros_to_end_1(array_name, array_size)
        OUTPUT result
    END FUNCTION
END
